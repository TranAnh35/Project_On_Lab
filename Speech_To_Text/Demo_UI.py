import tkinter as tk
from tkinter import StringVar
import pyaudio
import wave
import whisper
import threading

# C·∫•u h√¨nh audio
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 16000
CHUNK = 1024
AUDIO_FILE = "recorded_audio.wav"

# Kh·ªüi t·∫°o model Whisper
model = whisper.load_model("small")  # S·ª≠ d·ª•ng "tiny" n·∫øu c·∫ßn ti·∫øt ki·ªám t√†i nguy√™n

# H√†m thu √¢m
def record_audio(start_btn, output_var, is_recording):
    def start_recording():
        nonlocal is_recording  # ƒê√¢y l√† c√°ch ƒë·ªÉ tham chi·∫øu ƒë·∫øn bi·∫øn b√™n ngo√†i h√†m
        is_recording = True
        start_btn.config(text="‚ñ†", bg="red")  # ƒê·ªïi n√∫t th√†nh h√¨nh vu√¥ng
        print("ƒêang thu √¢m...")

        audio = pyaudio.PyAudio()
        stream = audio.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)
        frames = []

        # Ghi √¢m trong khi ch∆∞a nh·∫•n n√∫t d·ª´ng
        while is_recording:
            data = stream.read(CHUNK)
            frames.append(data)

        # K·∫øt th√∫c thu √¢m
        stream.stop_stream()
        stream.close()
        audio.terminate()

        # L∆∞u file √¢m thanh
        wf = wave.open(AUDIO_FILE, 'wb')
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(audio.get_sample_size(FORMAT))
        wf.setframerate(RATE)
        wf.writeframes(b''.join(frames))
        wf.close()
        print("Thu √¢m ho√†n t·∫•t.")

        # Ch·∫°y Whisper tr√™n file ƒë√£ ghi
        transcribe_audio(output_var)
        start_btn.config(text="üé§", bg="green")  # Tr·∫£ n√∫t v·ªÅ icon mic

    def stop_recording():
        nonlocal is_recording  # Khai b√°o nonlocal ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã c·ªßa bi·∫øn ngo√†i
        is_recording = False

    if start_btn["text"] == "üé§":  # N·∫øu ƒëang l√† mic
        threading.Thread(target=start_recording).start()  # Ch·∫°y thu √¢m trong lu·ªìng ri√™ng
    else:
        stop_recording()

# H√†m x·ª≠ l√Ω √¢m thanh b·∫±ng Whisper
def transcribe_audio(output_var):
    print("ƒêang x·ª≠ l√Ω √¢m thanh...")
    result = model.transcribe(AUDIO_FILE, fp16=False)
    output_var.set(result["text"])  # C·∫≠p nh·∫≠t text ·ªü ph·∫ßn tr√™n
    print("K·∫øt qu·∫£:", result["text"])

# T·∫°o giao di·ªán b·∫±ng Tkinter
def create_ui():
    # Khai b√°o bi·∫øn is_recording trong h√†m create_ui
    is_recording = False

    # T·∫°o c·ª≠a s·ªï ch√≠nh
    root = tk.Tk()
    root.title("Speech to Text")
    root.geometry("500x300")
    root.resizable(False, False)

    # T·∫°o bi·∫øn StringVar ƒë·ªÉ c·∫≠p nh·∫≠t text
    output_var = StringVar()
    output_var.set("K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y...")

    # Ph·∫ßn tr√™n: K·∫øt qu·∫£
    output_label = tk.Label(root, textvariable=output_var, wraplength=480, font=("Arial", 14), justify="left", bg="white", anchor="w")
    output_label.pack(fill="both", expand=True, padx=10, pady=10)

    # Ph·∫ßn d∆∞·ªõi: N√∫t ghi √¢m
    start_btn = tk.Button(root, text="üé§", font=("Arial", 20), bg="green", fg="white", width=5, height=2, command=lambda: record_audio(start_btn, output_var, is_recording))
    start_btn.pack(pady=20)

    # Kh·ªüi ch·∫°y giao di·ªán
    root.mainloop()

if __name__ == "__main__":
    create_ui()
